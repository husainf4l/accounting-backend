generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum TaxType {
  VAT
  ZERO_RATE
  EXEMPT
}

enum PaymentMode {
  CASH
  ACCOUNTS_RECEIVABLE
}

// Models

// Chart of Accounts Model
model Account {
  id              String          @id @default(uuid())
  accountNumber   String          @unique
  groupCode       String
  name            String
  accountType     AccountType
  openingBalance  Float?          @default(0.0)
  currentBalance  Float           @default(0.0)
  parentAccountId String?
  parentAccount   Account?        @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  children        Account[]       @relation("AccountHierarchy")
  transactions    Transaction[]
  leases          Lease[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  GeneralLedger   GeneralLedger[]
}

// Transactions Model
model Transaction {
  id             String       @id @default(uuid())
  accountId      String
  account        Account      @relation(fields: [accountId], references: [id])
  journalEntryId String
  journalEntry   JournalEntry @relation("JournalEntryTransactions", fields: [journalEntryId], references: [id])
  debit          Float? // Use separate fields for debit and credit
  credit         Float? // Helps differentiate the nature of the transaction
  currency       String       @default("JOD")
  notes          String?
  createdAt      DateTime     @default(now())
}

model JournalEntry {
  id           String        @id @default(uuid())
  date         DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("JournalEntryTransactions")
}

// Customer Model
model Customer {
  id        String     @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  invoices  Invoice[]
  contracts Contract[]
  createdAt DateTime   @default(now())
}

// Invoice Model
model Invoice {
  id            String      @id @default(uuid())
  invoiceNumber String      @unique
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])
  date          DateTime    @default(now())
  total         Float
  taxType       TaxType     @default(VAT)
  taxAmount     Float
  grandTotal    Float
  paymentMode   PaymentMode @default(CASH)
  vendorName    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Contract Model for Revenue Recognition (IFRS 15)
model Contract {
  id          String       @id @default(uuid())
  customerId  String
  customer    Customer     @relation(fields: [customerId], references: [id])
  totalValue  Float
  obligations Obligation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Obligation Model for Revenue Recognition (IFRS 15)
model Obligation {
  id           String   @id @default(uuid())
  contractId   String
  contract     Contract @relation(fields: [contractId], references: [id])
  description  String
  revenueValue Float
  fulfilled    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Lease Model (IFRS 16)
model Lease {
  id             String   @id @default(uuid())
  accountId      String
  account        Account  @relation(fields: [accountId], references: [id])
  leaseLiability Float
  rouAsset       Float
  leaseTerm      Int // Lease term in months
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Salary Model (IFRS 2 - Employee Benefits)
model Salary {
  id          String   @id @default(uuid())
  employeeId  String
  amount      Float
  benefit     Float
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Asset Model (IFRS 5 & 13)
model Asset {
  id          String   @id @default(uuid())
  name        String
  value       Float
  heldForSale Boolean  @default(false)
  fairValue   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GeneralLedger {
  id        String   @id @default(uuid())
  accountId String   @unique
  balance   Float
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])
}
