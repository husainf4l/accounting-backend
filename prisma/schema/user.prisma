model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  phoneNumber  String
  userName     String        @unique
  name         String
  fcmToken     String?
  profileImage String        @default("https://firebasestorage.googleapis.com/v0/b/gixatco.firebasestorage.app/o/settings%2Fshared%2Fdownload.jpeg?alt=media&")
  role         UserRole      @default(USER)
  companyId    String? // Active company ID
  tenantId     Int?
  position     String?
  department   String?
  hireDate     DateTime?
  salary       Float?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  company      Company?      @relation("ActiveCompany", fields: [companyId], references: [id])
  companies    UserCompany[] @relation("UserCompanies") // Many-to-many relation via UserCompany
  invoices     Invoice[]
  receipts     Receipt[]
}

model Company {
  id                String   @id @default(uuid())
  name              String
  address           String?
  whatsAppKey       String?
  phone             String?
  email             String   @unique
  website           String?
  taxNumber         String?  @unique
  logoImage         String
  legalName         String?
  eInvoiceClientId  String?
  eInvoiceSecretKey String?
  eInvoiceLink      String?
  legalId           String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  users         UserCompany[]   @relation("UserCompanies") // Many-to-many relation via UserCompany
  activeUsers   User[]          @relation("ActiveCompany")
  invoices      Invoice[]
  LinkedAccount LinkedAccount[]
}

model UserCompany {
  id         String   @id @default(uuid())
  userId     String
  companyId  String
  position   String? // User's position in the company
  department String? // User's department in the company
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("UserCompanies", fields: [userId], references: [id])
  company    Company  @relation("UserCompanies", fields: [companyId], references: [id])

  @@unique([userId, companyId]) // Ensures no duplicate user-company relationships
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Employee {
  id         String    @id @default(uuid())
  userId     String?   @unique
  position   String?
  department String?
  hireDate   DateTime?
  salary     Float?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String?
  companyId  String
  invoices   Invoice[]
  receipts   Receipt[]
}
