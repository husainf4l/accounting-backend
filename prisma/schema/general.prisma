model Account {
  id                 String          @id @default(uuid())
  code               String
  name               String
  nameAr             String?
  companyId          String
  accountType        AccountType
  openingBalance     Float?          @default(0.0)
  currentBalance     Float           @default(0.0)
  parentAccountId    String?
  mainAccount        Boolean         @default(false)
  level              Int?
  ifrcClassification String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  parentAccount      Account?        @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  children           Account[]       @relation("AccountHierarchy")
  transactions       Transaction[]
  GeneralLedger      GeneralLedger[]
  LinkedAccount      LinkedAccount[]

  @@unique([code, companyId])
  @@index([companyId])
  @@index([companyId, code])
}

model BankDetails {
  id            String          @id @default(uuid())
  accountId     String          @unique
  bankName      String
  companyId     String
  accountNumber String
  iban          String?
  swiftCode     String?
  branchName    String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  GeneralLedger GeneralLedger[]
}

model Transaction {
  id             String       @id @default(uuid())
  accountId      String
  journalEntryId String
  debit          Float?
  customerId     String?
  customer       Customer?    @relation(fields: [customerId], references: [id])
  companyId      String
  credit         Float?
  currency       String       @default("JOD")
  notes          String?
  createdAt      DateTime     @default(now())
  account        Account      @relation(fields: [accountId], references: [id])
  journalEntry   JournalEntry @relation("JournalEntryTransactions", fields: [journalEntryId], references: [id])

  @@index([companyId])
  @@index([companyId, createdAt])
}

model JournalEntry {
  id           String        @id @default(uuid())
  date         DateTime      @default(now())
  companyId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("JournalEntryTransactions")

  @@index([companyId])
}

model Customer {
  id             String          @id @default(cuid())
  identification String          @default("Unknown")
  name           String
  nameAr         String?
  taxId          String?
  openingBalance Float           @default(0.0)
  currentBalance Float           @default(0.0)
  companyId      String
  countryCode    String          @default("JO")
  city           String?
  phone          String?
  email          String?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  deletedAt      DateTime?
  accountId      String?
  contracts      Contract[]
  invoices       Invoice[]
  receipts       Receipt[]
  Transaction    Transaction[]
  GeneralLedger  GeneralLedger[]

  @@unique([taxId, companyId])
  @@index([companyId])
}

model Receipt {
  id                   String      @id @default(uuid())
  receiptNumber        Int         @unique
  accountId            String
  customerId           String
  companyId            String
  accountManagerId     String?
  date                 DateTime    @default(now())
  paymentMode          PaymentMode
  TransactionAccountId String?
  totalAmount          Float
  notes                String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  userId               String?
  chequeDetails        Cheque[]
  accountManager       Employee?   @relation(fields: [accountManagerId], references: [id])
  customer             Customer    @relation(fields: [customerId], references: [id])
  User                 User?       @relation(fields: [userId], references: [id])

  @@index([companyId])
}

model Cheque {
  id           String   @id @default(uuid())
  receiptId    String
  chequeNumber String
  bankName     String
  companyId    String
  amount       Float
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  receipt      Receipt  @relation(fields: [receiptId], references: [id])

  @@index([companyId])
}

model Contract {
  id          String       @id @default(uuid())
  customerId  String
  totalValue  Float
  companyId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  customer    Customer     @relation(fields: [customerId], references: [id])
  obligations Obligation[]
}

model Obligation {
  id           String   @id @default(uuid())
  contractId   String
  companyId    String
  description  String
  revenueValue Float
  fulfilled    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  contract     Contract @relation(fields: [contractId], references: [id])
}

model Salary {
  id          String   @id @default(uuid())
  employeeId  String
  amount      Float
  companyId   String
  benefit     Float
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Asset {
  id          String   @id @default(uuid())
  name        String
  value       Float
  companyId   String
  heldForSale Boolean  @default(false)
  fairValue   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GeneralLedger {
  id         String       @id @default(uuid())
  accountId  String? // Link to an account
  customerId String? // Link to a customer
  supplierId String? // Link to a supplier
  bankId     String? // Link to a bank
  expenseId  String? // Link to an expense
  debit      Float        @default(0.0)
  credit     Float        @default(0.0)
  balance    Float        @default(0.0) // Running balance
  companyId  String
  date       DateTime     @default(now())
  notes      String?
  updatedAt  DateTime     @updatedAt
  account    Account?     @relation(fields: [accountId], references: [id])
  customer   Customer?    @relation(fields: [customerId], references: [id])
  supplier   Supplier?    @relation(fields: [supplierId], references: [id])
  bank       BankDetails? @relation(fields: [bankId], references: [id])
  expense    Expense?     @relation(fields: [expenseId], references: [id])

  @@index([companyId])
  @@index([accountId])
  @@index([customerId])
}

model Supplier {
  id            String          @id @default(uuid())
  name          String
  companyId     String
  contact       String? // Optional contact info
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  GeneralLedger GeneralLedger[] // Relation to General Ledger
}

model Expense {
  id            String          @id @default(uuid())
  description   String
  amount        Float
  date          DateTime        @default(now())
  companyId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  GeneralLedger GeneralLedger[] // Relation to General Ledger
}

model Product {
  id                  String                @id @default(uuid())
  barcode             String?               @unique
  name                String
  companyId           String
  description         String?
  costPrice           Float                 @default(0.0)
  salesPrice          Float                 @default(0.0)
  wholesalePrice      Float                 @default(0.0)
  avgPrice            Float?                @default(0.0)
  stock               Int                   @default(0)
  reorderLevel        Int?
  totalCost           Float                 @default(0.0) // Add this field
  isActive            Boolean               @default(true)
  origin              String?
  family              String?
  subFamily           String?
  taxRate             Float                 @default(0.16)
  discountRate        Float                 @default(0.0)
  profitMargin        Float?
  location            String?
  packaging           String?
  category            String?
  nrv                 Float?
  itemType            String?
  imageUrl            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  invoices            InvoiceItem[]
  warehouses          WarehouseStock[]
  InventoryMovement   InventoryMovement[]
  valuationMethod     ValuationMethod       @default(FIFO)
  PurchaseInvoiceItem PurchaseInvoiceItem[]

  @@index([companyId])
}

enum ValuationMethod {
  FIFO
  WAC
}

model Warehouse {
  id        String           @id @default(uuid())
  name      String
  location  String?
  companyId String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  stock     WarehouseStock[]
  // InventoryMovement InventoryMovement[]
}

model WarehouseStock {
  id          String    @id @default(uuid())
  warehouseId String
  productId   String
  companyId   String
  stock       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
  CONTRA_ASSET
}

enum TaxType {
  VAT
  ZERO_RATE
  EXEMPT
}

enum PaymentMode {
  CASH
  ACCOUNTS_RECEIVABLE
  CHEQUE
}

model InventoryMovement {
  id          String       @id @default(uuid())
  productId   String
  warehouseId String?
  companyId   String
  type        MovementType // IN or OUT
  quantity    Int
  costPerUnit Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  product     Product      @relation(fields: [productId], references: [id])
  // warehouse   Warehouse    @relation(fields: [warehouseId], references: [id])

  @@index([companyId, productId])
}

enum MovementType {
  IN
  OUT
}

model LinkedAccount {
  id          String   @id @default(uuid())
  companyId   String // Link to the company
  role        String // Example: "Cash Account", "Main Cash Account", "Trade Expense"
  accountId   String // Linked account ID
  description String? // Optional description for the link
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  account Account @relation(fields: [accountId], references: [id])

  @@unique([companyId, role]) // Each role should be unique per company
}
