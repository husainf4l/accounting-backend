// Enums
enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum TaxType {
  VAT
  ZERO_RATE
  EXEMPT
}

enum PaymentMode {
  CASH
  ACCOUNTS_RECEIVABLE
  CHEQUE
}

// Chart of Accounts Model
model Account {
  id              String          @id @default(uuid())
  hierarchyCode   String          @unique
  name            String
  accountType     AccountType
  openingBalance  Float?          @default(0.0)
  currentBalance  Float           @default(0.0)
  parentAccountId String?
  parentAccount   Account?        @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  children        Account[]       @relation("AccountHierarchy")
  transactions    Transaction[]
  leases          Lease[]
  mainAccount     Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  GeneralLedger   GeneralLedger[]
}

model BankDetails {
  id        String @id @default(uuid())
  accountId String @unique

  bankName      String
  accountNumber String
  iban          String?
  swiftCode     String?
  branchName    String?
  isActive      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id             String       @id @default(uuid())
  accountId      String
  account        Account      @relation(fields: [accountId], references: [id])
  journalEntryId String
  journalEntry   JournalEntry @relation("JournalEntryTransactions", fields: [journalEntryId], references: [id])
  debit          Float? // Use separate fields for debit and credit
  credit         Float? // Helps differentiate the nature of the transaction
  currency       String       @default("JOD")
  notes          String?
  createdAt      DateTime     @default(now())
}

model JournalEntry {
  id           String        @id @default(uuid())
  date         DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("JournalEntryTransactions")
}

model Customer {
  id             String     @id @default(cuid())
  identification String     @default("Unknown")
  schemeId       String     @default("Unknown")
  name           String
  postalCode     String?
  countryCode    String     @default("JO")
  phone          String?
  email          String?
  address        String?
  invoices       Invoice[]
  contracts      Contract[]
  receipts       Receipt[]
  accountId      String     @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?  @updatedAt
}

// Invoice Model

model Receipt {
  id                   String      @id @default(uuid())
  receiptNumber        Int         @unique
  accountId            String
  customerId           String
  customer             Customer    @relation(fields: [customerId], references: [id])
  accountManagerId     String? // Optional
  accountManager       Employee?   @relation(fields: [accountManagerId], references: [id])
  date                 DateTime    @default(now())
  paymentMode          PaymentMode
  TransactionAccountId String? // Optional for Cash payments
  chequeDetails        Cheque[] // Multiple cheques for cheque payments
  totalAmount          Float
  notes                String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  User                 User?       @relation(fields: [userId], references: [id])
  userId               String?
}

model Cheque {
  id           String   @id @default(uuid())
  receiptId    String
  receipt      Receipt  @relation(fields: [receiptId], references: [id])
  chequeNumber String
  bankName     String
  amount       Float
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Contract {
  id          String       @id @default(uuid())
  customerId  String
  customer    Customer     @relation(fields: [customerId], references: [id])
  totalValue  Float
  obligations Obligation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Obligation {
  id           String   @id @default(uuid())
  contractId   String
  contract     Contract @relation(fields: [contractId], references: [id])
  description  String
  revenueValue Float
  fulfilled    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Lease {
  id             String   @id @default(uuid())
  accountId      String
  account        Account  @relation(fields: [accountId], references: [id])
  leaseLiability Float
  rouAsset       Float
  leaseTerm      Int // Lease term in months
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Salary {
  id          String   @id @default(uuid())
  employeeId  String
  amount      Float
  benefit     Float
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Asset {
  id          String   @id @default(uuid())
  name        String
  value       Float
  heldForSale Boolean  @default(false)
  fairValue   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GeneralLedger {
  id        String   @id @default(uuid())
  accountId String   @unique
  balance   Float
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])
}

model Product {
  id             String           @id @default(uuid())
  barcode        String?          @unique
  name           String
  description    String?
  costPrice      Float            @default(0.0)
  salesPrice     Float            @default(0.0)
  wholesalePrice Float            @default(0.0)
  avgPrice       Float?           @default(0.0)
  stock          Int              @default(0)
  reorderLevel   Int?
  isActive       Boolean          @default(true)
  origin         String?
  family         String?
  subFamily      String?
  taxRate        Float            @default(0.16)
  discountRate   Float            @default(0.0)
  profitMargin   Float?
  location       String?
  packaging      String?
  itemType       String?
  imageUrl       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  invoices       InvoiceItem[]
  warehouses     WarehouseStock[]
}

model Warehouse {
  id        String           @id @default(uuid())
  name      String
  location  String?
  stock     WarehouseStock[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model WarehouseStock {
  id          String    @id @default(uuid())
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  stock       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
